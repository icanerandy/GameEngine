cmake_minimum_required(VERSION 3.30)
project(GameEngine)

set(CMAKE_CXX_STANDARD 20)

# 平台名称
if (WIN32)
    if (CMAKE_SIZEOF_VOID_P EQUAL 8)
        set(PLATFORM "win64")
    else ()
        set(PLATFORM "win32")
    endif ()
elseif (UNIX)
    if (APPLE)
        set(PLATFORM "macos")
    else ()
        set(PLATFORM "linux")
    endif ()
    if (CMAKE_SIZEOF_VOID_P EQUAL 8)
        set(PLATFORM "${PLATFORM}64")
    else ()
        set(PLATFORM "${PLATFORM}32")
    endif ()
else ()
    set (PLATFORM "unknown")
endif ()
message(STATUS "Platform: ${PLATFORM}")

# 配置输出位置
set(CMAKE_LIBRARY_OUTPUT_DIRECTORY_DEBUG "${PROJECT_SOURCE_DIR}/bin/${PLATFORM}/${CMAKE_BUILD_TYPE}")
set(CMAKE_LIBRARY_OUTPUT_DIRECTORY_RELWITHDEBINFO "${PROJECT_SOURCE_DIR}/bin/${PLATFORM}/${CMAKE_BUILD_TYPE}")
set(CMAKE_LIBRARY_OUTPUT_DIRECTORY_RELEASE "${PROJECT_SOURCE_DIR}/bin/${PLATFORM}/${CMAKE_BUILD_TYPE}")

set(CMAKE_RUNTIME_OUTPUT_DIRECTORY_DEBUG "${PROJECT_SOURCE_DIR}/bin/${PLATFORM}/${CMAKE_BUILD_TYPE}")
set(CMAKE_RUNTIME_OUTPUT_DIRECTORY_RELWITHDEBINFO "${PROJECT_SOURCE_DIR}/bin/${PLATFORM}/${CMAKE_BUILD_TYPE}")
set(CMAKE_RUNTIME_OUTPUT_DIRECTORY_RELEASE "${PROJECT_SOURCE_DIR}/bin/${PLATFORM}/${CMAKE_BUILD_TYPE}")

set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY_DEBUG "${PROJECT_SOURCE_DIR}/bin/${PLATFORM}/${CMAKE_BUILD_TYPE}")
set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY_RELWITHDEBINFO "${PROJECT_SOURCE_DIR}/bin/${PLATFORM}/${CMAKE_BUILD_TYPE}")
set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY_RELEASE "${PROJECT_SOURCE_DIR}/bin/${PLATFORM}/${CMAKE_BUILD_TYPE}")

set(EXECUTABLE_OUTPUT_PATH_DEBUG "${PROJECT_SOURCE_DIR}/bin/${PLATFORM}/${CMAKE_BUILD_TYPE}")
set(EXECUTABLE_OUTPUT_PATH_RELWITHDEBINFO "${PROJECT_SOURCE_DIR}/bin/${PLATFORM}/${CMAKE_BUILD_TYPE}")
set(EXECUTABLE_OUTPUT_PATH_RELEASE "${PROJECT_SOURCE_DIR}/bin/${PLATFORM}/${CMAKE_BUILD_TYPE}")

add_library(${PROJECT_NAME} SHARED
        ${CMAKE_SOURCE_DIR}/src/test.cpp
)

target_include_directories(${PROJECT_NAME} PRIVATE
        ${CMAKE_SOURCE_DIR}/src
)

# 测试程序
add_executable(test example/src/main.cpp)
#target_include_directories(test PRIVATE
#        ${CMAKE_SOURCE_DIR}/src
#)
target_link_libraries(test PRIVATE
        ${PROJECT_NAME}
)
